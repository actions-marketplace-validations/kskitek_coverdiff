name: Test coverage report
concurrency:
  cancel-in-progress: true
  group: coverdiff-${{ github.ref }}

on: [pull_request]

jobs:
  main:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout A'
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: '1'
    - name: 'Setup Golang'
      uses: actions/setup-go@v3
      with:
        go-version: '1.20'
    - name: 'Generate coverage A'
      run: go test -cover ./... | grep -v "no test files" | awk '{print $2,$5}' | sed -e 's/%//' > a.cover
    - name: 'Checkout B'
      uses: actions/checkout@v3
      with:
        path: main
        ref: main
        # ${{ github.event.pull_request.base.sha }}
        # ref: ${{ inputs.base }} TODO
        #ref: main
        fetch-depth: '1'
    - name: 'Generate coverage B'
      working-directory: main
      run: go test -cover ./... | grep -v "no test files" | awk '{print $2,$5}' | sed -e 's/%//' > b.cover
    - name: 'Generate diff'
      run: |
        cat a.cover > sum.cover
        cat main/b.cover >> sum.cover
        cat sum.cover | sort | uniq -u > changes.cover
        awk 'NR % 2 != 0 {pkg=$1; a=$2} NR % 2 == 0 {b=$2;
          if (a < b) {printf "%s %d% < %d%", pkg,a,b};
          if (a > b) {printf "%s %d% > %d%", pkg,a,b}}' changes.cover > diff
        cat diff
        CHANGES=$(cat diff | wc -l)
        echo "CHANGES=$CHANGES" >> $GITHUB_ENV
        echo "## $CHANGES"
    - name: 'Test'
      if: env.CHANGES != null
      run: echo ${{ env.CHANGES }}
    - name: 'Comment PR'
      #if: env.CHANGES != null
      uses: thollander/actions-comment-pull-request@v2
      env:
        GITHUB_TOKEN: ${{ secrets.COMMENTER_TOKEN }}
      with:
        message: |
          There are test changes ${{ env.CHANGES }}
